<?php

/*
#/usr/bin/env python
"""This scripts downloads the last OUI manufaturer file from the Whireshark
project and converts it to esp8266_deauther format"""

import argparse
from urllib.request import urlopen
*/

mb_internal_encoding("UTF-8");

$vendorlen = 6;


$vendorlistURL = "manuf";//"https://code.wireshark.org/review/gitweb?p=wireshark.git;a=blob_plain;f=manuf"

$ouicontent = file_get_contents($vendorlistURL);

//$ouicontent = iconv('windows-1250', 'utf-8', $ouicontent);

$ouilines = explode("\n", $ouicontent);

$uniqvendors = array();
$total = 0;
$totalvendorlen = 0;


foreach($ouilines as $line) {
  if(trim($line)=='') continue;
  if(substr(trim($line), 0, 1)=='#') continue;
  $parts = explode("\t", $line);
  if(count($parts)<3) continue;
  $mac = trim($parts[0]);
  if(strlen($mac)!=8) continue; // F8:02:78
  $vendorname = trim($parts[1]);
  $vendorname = str_replace(" ", "", $vendorname);
  if(strlen($vendorname)>$vendorlen) {
    $vendorname = mb_substr($vendorname, 0, $vendorlen);
  }
/*
  if(strlen($vendorname)<$vendorlen) {
    $vendorname = $vendorname.str_repeat(" ", $vendorlen-strlen($vendorname));
  }
*/
  if(!isset($uniqvendors[$vendorname])) {
    $uniqvendors[$vendorname] = 1;
  } else {
    $uniqvendors[$vendorname]++;
  }
  $totalvendorlen+= strlen($vendorname);
  $vendorlongname = trim($parts[2]);

  echo "$mac\t [".strlen($vendorname)."] $vendorname\t$vendorlongname\n";
  $total++;
//  echo count($parts);
//  echo $line."\n";
}

echo "Unique vendors ".count($uniqvendors)." / Total vendord $total\n";
echo "Total vendor len: $totalvendorlen / Unique vendor len: ".strlen(implode("", array_keys($uniqvendors)))."\n";



$uniqchars = array();
$total = 0;
$uniq = 0;

foreach($uniqvendors as $vendor => $amount) {
  $chars = mb_str_split($vendor);
  //$chars = preg_split('//u', $vendor, null, PREG_SPLIT_NO_EMPTY);
  foreach($chars as $char) {
    if(!isset($uniqchars[$char])) {
      $uniqchars[$char] = $uniq;
      $uniq++;
      echo "[".$char."=".ord($char)."] ";
    } else {
      //$uniqchars[$char]++;
    }
    $total++;
  }
}
echo "\n";

echo "Unique chars ".count($uniqchars)." / Total chars $total\n";
if(isset($uniqchars[" "])) {
  echo "Empty chars ".$uniqchars[" "]."\n";
} else {
  echo "No empty chars\n";
}




$binvendorstr = "";

foreach($uniqvendors as $vendor => $vendorid) {
  $chars = mb_str_split($vendor);
  $vendorarray = array('begin');
  foreach($chars as $char) {
    $vendorarray[] = $uniqchars[$char];
    //echo sprintf('%07b', $uniqchars[$char]);
    $binvendorstr .= sprintf('%07b', $uniqchars[$char]);//
  }
  //echo implode(",", $vendorarray)."\n";
  //echo "\n";
}


$octets = str_split($binvendorstr, 8);

echo "last : ".end($octets)."\n";

$wrap = 0;
$num = 9;
$lines = 0;

foreach($octets as $octet) {
  if($wrap++%$num==0) {
    $lines++;
    echo "\n";
  }
  echo sprintf('0x%02X', bindec($octet)).", ";
}

echo "\n";
echo "$lines lines\n";

function mb_str_split( $string ) {
    # Split at all position not after the start: ^
    # and not before the end: $
    return preg_split('/(?<!^)(?!$)/u', $string );
}


exit(0);









/*


const static uint8_t data_vendors[] PROGMEM = {
"""

    for line in data:
        line = line.decode()

        # Skipping empty lines and comments
        if line.startswith('#') or line.startswith('\n'):
            continue

        mac, short_desc, *rest = line.strip().split('\t')

        # Limiting short_desc to 8 chars
        short_desc = short_desc[0:6]

        # Convert to ascii
        short_desc = short_desc.encode("ascii", "ignore").decode()

        mac_octects = len(mac.split(':'))
        if mac_octects == 6:
            continue
        else:
            # Convert to esp8266_deauther format
            short_desc = short_desc.ljust(6, '\0')
            hex_sdesc = ", 0x".join("{:02x}".format(ord(c)) for c in short_desc)

            (oc1, oc2, oc3) = mac.split(':')

            out = out + ("  0x{}, 0x{}, 0x{}, 0x{},\n".format(oc1.upper(), oc2.upper(), oc3.upper(),
                                                              hex_sdesc.upper().replace('X', 'x')))

    out = out[:-2] # Removing last comma
    out = out + "\n};\n#endif"

    # Saving to file
    if filename:
        with open(filename, 'w') as out_file:
            out_file.write("%s" % out)
    else:
        print(out)

if __name__ == "__main__":
    options = parse_options()
    generate_oui_h(options.url, options.output)


*/
